## sensors.yaml

# Create custom sensor to output conversion as total potential max of forecast for panel area
# Panel is 330W max for 1.94628m2 (8 panels = 15.57 m2 and 2,640 W max)
# Efficiency of panel is 16.97% (Scale of 0.1697 of forecast as their potential maximum)
# Weather station actual measured radiation 'sensor.thornton_solar_rad' is W/m2 (ignores efficiency of panels)
# Total (W) = W/m2 * panel area * efficiency
- platform: template
  sensors:
    custom_ac_loads:
      friendly_name: "AC Loads Custom"
      value_template: >-
        {{ states('sensor.ac_loads') | int }}
      unit_of_measurement: "W"
      # Change value in this line below for the icon change threshold
      icon_template: >-
        {% if int(states('sensor.ac_loads')) >= 600 %}
          mdi:alert
        {%- else -%}
          mdi:power-socket-fr
        {%- endif %}
    monthly_grid_cost:
      friendly_name: "Monthly Grid Cost"
      value_template: >-
        {{ (states('sensor.sonoff_10023a625a_energy_month') | float * 3.44) | round(2) }}
      unit_of_measurement: "R"
    radiation_converted:
      friendly_name: "Forecasted solar radiation W/m2 converted to Total"
      unit_of_measurement: "W"
      icon_template: mdi:sun-wireless
      device_class: power
      value_template: >-
          {{ states('sensor.thornton_solar_rad')|int * 15.57 * 0.1697}}
          
    # Calculate hours left to empty based on battery_max_capacity at 100% charge
    # UPDATE MAY 2023: Empty is actually 11% SOC so adjusted formula to reach 11% instead of 0%
    # Hours left = (SOC%-11) * battery_max_capacity (Ah) divided by Current in Amps eg. 86% at 11 Amps is (0.86*206)/11
    # Condition 1 to check battery is discharging (current in Amps will be negative number), then use ABS of battery_current to make negative current flow, a positive float number. Set this to -1 Amp (50W at 52V) instead of 0 Amps to prevent very small discharges when full, from projecting extremely long hours on gauge
    # Condition 2 to check if battery current is zero or charging, then calculate time left based on ac load (AC Watts converted to DC Amps current - because AC Watts = DC Watts)
    # Had to convert all to floats for precision of partial hours, then rounded to 2 decimals
    time_left_on_battery_zero:
      friendly_name: "Time left on Battery to Empty"
      unit_of_measurement: "Hours"
      icon_template: mdi:sort-clock-ascending-outline
      value_template: >-
          {% set battery_current = states('sensor.battery_current')|float %}
          {% set battery_soc = states('sensor.battery_soc')|float %}
          {% set loads_current = states('sensor.ac_loads')|float/states('sensor.battery_voltage')|float %}
          {% set battery_max_capacity = states('sensor.solar_battery_maximum_capacity')|float %}
          {{ ((((battery_soc-11)*battery_max_capacity)/100)/loads_current|float ) | round(2) }}
          

    # Calculate hours left to current min SOC based on battery_max_capacity at 100% charge, ie. when it reverts back to grid power
    # Hours left = (SOC%-MinSOC) * battery_max_capacity (Ah) divided by Current in Amps eg. 86%-40% at 11 Amps is (0.46*206)/11
    # Condition 1 to check if SoC has not already reached MinSOC or below it, as then time to reach MinSOC has reached 0 hours, so make 0
    # Condition 2 to check battery is discharging (current in Amps will be negative number), then use ABS of battery_current to make negative current flow, a positive float number.  Set this to -1 Amp (50W at 52V) instead of 0 Amps to prevent very small discharges when full, from projecting extremely long hours on gauge
    # Condition 3 to check if battery current is zero or charging, then calculate time left based on ac load (AC Watts converted to DC Amps current - because AC Watts = DC Watts) 
    # Had to convert all to floats for precision of partial hours, then rounded to 2 decimals
    time_left_on_battery_min_soc:
      friendly_name: "Time left on Battery to Min SoC"
      unit_of_measurement: "Hours"
      icon_template: mdi:sort-clock-ascending
      value_template: >-
        {% set battery_current = states('sensor.battery_current')|float %}
        {% set battery_soc = states('sensor.battery_soc')|float %}
        {% set loads_current = states('sensor.ac_loads')|float/states('sensor.battery_voltage')|float %}
        {% set battery_min_soc = states('sensor.victron_battery_min_soc')|float %}
        {% set battery_max_capacity = states('sensor.solar_battery_maximum_capacity')|float %}
        {% if (battery_soc-battery_min_soc) < 0 %}
          {{ 0 }}
        {% else %}
          {{ ((((battery_soc-battery_min_soc)*battery_max_capacity)/100)/loads_current | float ) | round(2) }}
        {% endif %}
    
    # This calculates the difference in whole days since the solar battery was last fully charged. It calculates based on the
    # value of the Helper called Battery Last Full Date's state. There is an Automation that triggers a reset of the Helper
    # when SOC is 100% and the battery current has changed from Charging to Idle. Less than a day will output 0.
    battery_last_full_days:
      unit_of_measurement: "Hours"
      icon_template: mdi:battery-charging-100
      value_template: >-
        {% set battery_last_full_date = as_timestamp(states.input_datetime.battery_last_full_date.state)|int %}
        {% set now_full_date = as_timestamp(now())|int %}
        {{ ((now_full_date - battery_last_full_date)/86400) | int }}
    # Convert raw imperial measurements from weather station into metric readings
    ambientweather_wind_kmh:
      friendly_name: Wind Speed
      unit_of_measurement: "km/h"
      icon_template: mdi:weather-windy
      value_template: >-
        {{(states('sensor.thornton_wind_speed')|int*1.609) | int}}
    ambientweather_wind_gust_kmh:
      friendly_name: Wind Gust
      unit_of_measurement: "km/h"
      icon_template: mdi:weather-windy
      value_template: >-
        {{(states('sensor.thornton_wind_gust')|int*1.609) | int}}
    ambientweather_max_gust_kmh:
      friendly_name: Max Gust
      unit_of_measurement: "km/h"
      icon_template: mdi:weather-windy
      value_template: >-
        {{(states('sensor.thornton_max_gust')|int*1.609) | int}}
    ambientweather_daily_rain_mm:
      friendly_name: Rain Today
      unit_of_measurement: "mm"
      icon_template: mdi:weather-rainy
      value_template: >-
        {{(states('sensor.thornton_daily_rain')|int*25.4) | int}}
    ambientweather_event_rain_mm:
      friendly_name: Rain Event
      unit_of_measurement: "mm"
      icon_template: mdi:weather-rainy
      value_template: >-
        {{(states('sensor.thornton_event_rain')|int*25.4) | int}}
        
# Set date format        
- platform: time_date
  display_options:
    - 'date_time_iso'

        
# Weather Underground PWS
#- platform: wundergroundpws
#  api_key: !secret wunderground_api
#  pws_id: !secret wunderground_station
#  numeric_precision: decimal
#  monitored_conditions:
#    - temp
#    - dewpt
#    - heatIndex
#    - solarRadiation
#    - uv
#    - windChill
#    - precipTotal
#    - precipRate
#    - windGust
#    - windSpeed
#    - weather_1d
#    - weather_1n
#    - weather_2d
#    - weather_2n
#    - precip_1d
#    - precip_chance_1d
#    - temp_high_1d
#    - temp_low_1d
#    - wind_1d
#    - precip_2d
#    - precip_chance_2d
#    - temp_high_2d
#    - temp_low_2d
#    - wind_2d

# RSS Feed from https://expiringonnetflix.blogspot.com/
#- platform: feedparser
#  name: Leaving Netflix
#  feed_url: 'https://expiringonnetflix.blogspot.com/feeds/posts/default?alt=rss'
#  date_format: '%a, %d %b %Y %H:%M:%S %Z'
#  scan_interval:
#    hours: 6
#  inclusions:
#    - title
#    - link
#    - description
#    - image
#    - pubDate
    
# RSS Feed from https://www.whats-on-netflix.com/leaving-soon/
# Installed Feedparser via HACS and rebooted
# Needed custom:list-card so downloaded list-card.js raw file from
# https://github.com/iantrich/list-card, and place under the /www/community subdirectory.
# Then import it as a new resource in HA's Settings / Dashboards / 3 dot menu top right, 
# add resource, and a Javascript module, specify relative path to that .js file
# eg. `/hacsfiles/list-card.js`, and then clear browser cache, and refresh browser
#- platform: feedparser
#  name: Leaving Netflix
#  feed_url: 'https://www.whats-on-netflix.com/leaving-soon/feed/'
#  date_format: '%a, %d %b %Y %H:%M:%S %Z'
#  scan_interval:
#    hours: 6
#  inclusions:
#    - title
#    - link
#    - description
#    - image
#    - pubDate

