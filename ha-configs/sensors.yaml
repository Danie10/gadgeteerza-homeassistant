## sensors.yaml

# Create custom sensor to output conversion as total potential max of forecast for panel area
# Panel is 330W max for 1.94628m2 (8 panels = 15.57 m2 and 2,640 W max)
# Efficiency of panel is 16.97% (Scale of 0.1697 of forecast as their potential maximum)
# Weather station actual measured radiation 'sensor.thornton_solar_rad' is W/m2 (ignores efficiency of panels)
# Total (W) = W/m2 * panel area * efficiency
- platform: template
  sensors:
    radiation_converted:
      friendly_name: "Forecasted solar radiation W/m2 converted to Total"
      unit_of_measurement: "W"
      icon_template: mdi:sun-wireless
      device_class: power
      value_template: >-
          {{ states('sensor.thornton_solar_rad')|int * 15.57 * 0.1697}}
          
    # Calculate hours left to empty based on battery max capacity of 206 Ah at 100% charge
    # Hours left = SOC% * 206 divided by Current in Amps eg. 86% at 11 Amps is (0.86*206)/11
    # Added condition to show time left ONLY if battery discharging at more than 8 Amps, otherwise would show infinity close to 0 Amps
    # If battery current is close to zero or positive (charging), then calculate time left base on current SOC at an 8 Amp discharge 
    # Arrived at 8 Amps number by using 24 hours as max
    # Had to convert all to floats for precision of partial hours, then rounded to 2 decimals
    time_left_on_battery_zero:
      friendly_name: "Time left on Battery to Empty"
      unit_of_measurement: "Hours"
      icon_template: mdi:sort-clock-ascending-outline
      value_template: >-
          {% if states('sensor.battery_current')|int < - 8 %}
            {{ (((states('sensor.battery_soc')|float*206)/100)/states('sensor.battery_current')|float|abs) | round(2) }}
          {% else %}
            {{ (((states('sensor.battery_soc')|float*206)/100)/8 | float ) | round(2) }}
          {% endif %}
          
    # Calculate hours left to current min Soc based on battery max capacity of 206 Ah at 100% charge, ie. when it reverts back to grid power
    # Hours left = (SOC%-MinSOC) * 206 divided by Current in Amps eg. 86%-40% at 11 Amps is (0.46*206)/11
    # Started with condition to check if SoC has not already reached MinSOC or below it, as then time to reach MinSOC has reached 0 hours
    # Added condition to show time left ONLY if battery discharging at more than 8 Amps, otherwise would show infinity close to 0 Amps
    # If battery current is close to zero or positive (charging), then calculate time left base on current SOC at an 8 Amp discharge 
    # Arrived at 8 Amps number by using 24 hours as max
    # Had to convert all to floats for precision of partial hours, then rounded to 2 decimals
    time_left_on_battery_min_soc:
      friendly_name: "Time left on Battery to Min SoC"
      unit_of_measurement: "Hours"
      icon_template: mdi:sort-clock-ascending
      value_template: >-
        {% if (states('sensor.battery_soc')|float-states('sensor.victron_battery_min_soc')|float) <= 0 %}
          {{ 0 }}
        {% elif states('sensor.battery_current')|int < - 8 %}
          {{ ((((states('sensor.battery_soc')|float-states('sensor.victron_battery_min_soc')|float)*206)/100)/(states('sensor.battery_current')|float|abs))|round(2) }}
        {% else %}
          {{ ((((states('sensor.battery_soc')|float-states('sensor.victron_battery_min_soc')|float)*206)/100)/8 | float ) | round(2) }}
        {% endif %}
          
# Weather Underground PWS
- platform: wundergroundpws
  api_key: !secret wunderground_api
  pws_id: !secret wunderground_station
  numeric_precision: decimal
  monitored_conditions:
    - temp
    - dewpt
    - heatIndex
    - solarRadiation
    - uv
    - windChill
    - precipTotal
    - precipRate
    - windGust
    - windSpeed
    - weather_1d
    - weather_1n
    - weather_2d
    - weather_2n
    - precip_1d
    - precip_chance_1d
    - temp_high_1d
    - temp_low_1d
    - wind_1d
    - precip_2d
    - precip_chance_2d
    - temp_high_2d
    - temp_low_2d
    - wind_2d

# RSS Feed from https://expiringonnetflix.blogspot.com/
#- platform: feedparser
#  name: Leaving Netflix
#  feed_url: 'https://expiringonnetflix.blogspot.com/feeds/posts/default?alt=rss'
#  date_format: '%a, %d %b %Y %H:%M:%S %Z'
#  scan_interval:
#    hours: 6
#  inclusions:
#    - title
#    - link
#    - description
#    - image
#    - pubDate
    
# RSS Feed from https://www.whats-on-netflix.com/leaving-soon/
# Installed Feedparser via HACS and rebooted
# Needed custom:list-card so downloaded list-card.js raw file from
# https://github.com/iantrich/list-card, and place under the /www/community subdirectory.
# Then import it as a new resource in HA's Settings / Dashboards / 3 dot menu top right, 
# add resource, and a Javascript module, specify relative path to that .js file
# eg. `/hacsfiles/list-card.js`, and then clear browser cache, and refresh browser
- platform: feedparser
  name: Leaving Netflix
  feed_url: 'https://www.whats-on-netflix.com/leaving-soon/feed/'
  date_format: '%a, %d %b %Y %H:%M:%S %Z'
  scan_interval:
    hours: 6
  inclusions:
    - title
    - link
    - description
    - image
    - pubDate
